version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: aura-postgres
    environment:
      POSTGRES_DB: aura_platform
      POSTGRES_USER: aura_user
      POSTGRES_PASSWORD: POSTGRES_PASSWORD_PLACEHOLDER
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - aura-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aura_user -d aura_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # =============================================================================
  # VECTOR DATABASE
  # =============================================================================
  milvus:
    image: milvusdb/milvus:v2.3.4
    container_name: aura-milvus
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    ports:
      - "19530:19530"
      - "9091:9091"
    volumes:
      - milvus_data:/var/lib/milvus
    networks:
      - aura-network
    depends_on:
      - etcd
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: aura-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - etcd_data:/etcd
    networks:
      - aura-network
    restart: unless-stopped

  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: aura-minio
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: minio server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - aura-network
    restart: unless-stopped

  # =============================================================================
  # REDIS CACHE & CELERY BACKEND
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: aura-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aura-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    command: redis-server --appendonly yes --requirepass REDIS_PASSWORD_PLACEHOLDER

  # =============================================================================
  # MESSAGE QUEUE
  # =============================================================================
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: aura-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: aura_user
      RABBITMQ_DEFAULT_PASS: RABBITMQ_PASSWORD_PLACEHOLDER
      RABBITMQ_DEFAULT_VHOST: aura_vhost
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - aura-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============================================================================
  # SECRETS MANAGEMENT
  # =============================================================================
  vault:
    image: vault:1.15.2
    container_name: aura-vault
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: aura-dev-token-2024
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
    networks:
      - aura-network
    command: ["vault", "server", "-dev"]
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============================================================================
  # APPLICATION SERVICES (PLACEHOLDERS FOR PHASE 0)
  # =============================================================================
  api-gateway:
    image: python:3.11-slim
    container_name: aura-api-gateway
    working_dir: /app
    environment:
      - PYTHONPATH=/app
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=aura_platform
      - POSTGRES_USER=aura_user
      - POSTGRES_PASSWORD=POSTGRES_PASSWORD_PLACEHOLDER
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=aura_user
      - RABBITMQ_PASSWORD=RABBITMQ_PASSWORD_PLACEHOLDER
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=REDIS_PASSWORD_PLACEHOLDER
      - RABBITMQ_VHOST=aura_vhost
    ports:
      - "8000:8000"
    volumes:
      - ./src/api_gateway:/app
    networks:
      - aura-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/info"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

  intelligence-worker:
    image: python:3.11-slim
    container_name: aura-intelligence-worker
    working_dir: /app
    environment:
      - PYTHONPATH=/app
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=aura_platform
      - POSTGRES_USER=aura_user
      - POSTGRES_PASSWORD=POSTGRES_PASSWORD_PLACEHOLDER
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=aura_user
      - RABBITMQ_PASSWORD=RABBITMQ_PASSWORD_PLACEHOLDER
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=REDIS_PASSWORD_PLACEHOLDER
      - RABBITMQ_VHOST=aura_vhost
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=REDIS_PASSWORD_PLACEHOLDER
    volumes:
      - ./src/intelligence_worker:/app
    networks:
      - aura-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      milvus:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["python", "-m", "celery", "-A", "app.celery_app", "worker", "--loglevel=info", "--concurrency=4"]

  ingestion-worker:
    image: python:3.11-slim
    container_name: aura-ingestion-worker
    working_dir: /app
    environment:
      - PYTHONPATH=/app
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=aura_platform
      - POSTGRES_USER=aura_user
      - POSTGRES_PASSWORD=POSTGRES_PASSWORD_PLACEHOLDER
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=aura_user
      - RABBITMQ_PASSWORD=RABBITMQ_PASSWORD_PLACEHOLDER
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=REDIS_PASSWORD_PLACEHOLDER
      - RABBITMQ_VHOST=aura_vhost
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=REDIS_PASSWORD_PLACEHOLDER
    volumes:
      - ./src/ingestion_worker:/app
    networks:
      - aura-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      milvus:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["python", "-m", "celery", "-A", "app.celery_app", "worker", "--loglevel=info", "--concurrency=2"]

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  milvus_data:
    driver: local
  etcd_data:
    driver: local
  minio_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  vault_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  aura-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
